AWSTemplateFormatVersion: 2010-09-09

Description: "[Analytics] Service deployment"

Parameters:

  AppName:
    Type: String
    Default: analytics
    Description: |
      The name of the pinpoint app to create.

Resources:

  MasterRegion:
    Type: Custom::GlobalImports
    Properties:
      ServiceToken: !ImportValue GlobalImportValue
      SourceRegion: !ImportValue MasterRegion
      Exports:
        - 'AuthenticatedRole'
        - 'UnauthenticatedRole'
        - 'Fabric'

  Pinpoint:
    DependsOn: PinpointFunctionLogGroup
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt PinpointFunction.Arn
      AppName: !Ref AppName

  PinpointFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 300
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const aws = require('aws-sdk');
          const pinpoint = new aws.Pinpoint({ apiVersion: '2016-12-01', region: 'us-east-1' });
          exports.handler = function(event, context) {
            if (event.RequestType == 'Delete') {
              response.send(event, context, response.SUCCESS);
              return;
            }
            if (event.RequestType == 'Update') {
              response.send(event, context, response.SUCCESS);
              return;
            }
            if (event.RequestType == 'Create') {
              const AppName = event.ResourceProperties.AppName;
              let responseData = {};
              const params = {
                CreateApplicationRequest: {
                  Name: AppName
                }
              };
              return pinpoint.createApp(params).promise()
                .then((res) => {
                    responseData = res.ApplicationResponse;
                    response.send(event, context, response.SUCCESS, responseData);
                }).catch((err) => {
                    console.log(err.stack);
                    responseData = {Error: err};
                    response.send(event, context, response.FAILED, responseData);
                    throw err;
                });
            }
          };
      Role: !GetAtt PinpointFunctionExecutionRole.Arn

  PinpointFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PinpointFunction}"
      RetentionInDays: 1

  PinpointFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LoggingPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: PinpointPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:*
                  - mobiletargeting:*
                Resource: "*"

  PinpointAuthenticatedUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PinpointPermissions
      Roles:
        - !GetAtt MasterRegion.AuthenticatedRole
        - !GetAtt MasterRegion.UnauthenticatedRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - mobiletargeting:PutEvents
              - mobiletargeting:UpdateEndpoint
            Resource:
              - !Sub "arn:${AWS::Partition}:mobiletargeting:*:${AWS::AccountId}:apps/${Pinpoint.Id}"

  SendMessagesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 20
      Environment:
        Variables:
          APPLICATION_ID: !GetAtt Pinpoint.Id
      Code:
        ZipFile: |
          const Pinpoint = require('aws-sdk/clients/pinpoint');
          const { APPLICATION_ID: ApplicationId, AWS_REGION: region } = process.env;
          const pinpoint = new Pinpoint({ region, params: { ApplicationId } });
          exports.handler = ({ Records }, ctx, cb) => {
            Promise.all(Records.map(({ Sns: { Message } }) => (
              pinpoint.sendMessages(JSON.parse(Message)).promise()
            ))).then(data => cb(null, data)).catch(cb);
          };
      Role: !GetAtt SendMessagesFunctionExecutionRole.Arn

  SendMessagesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SendMessagesFunction}"
      RetentionInDays: 1

  SendMessagesFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LoggingPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: PinpointPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobiletargeting:SendMessages
                Resource:
                  - !Sub "arn:${AWS::Partition}:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/${Pinpoint.Id}/messages"

  FabricSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Region: !ImportValue MasterRegion
      TopicArn: !GetAtt MasterRegion.Fabric
      Protocol: lambda
      Endpoint: !GetAtt SendMessagesFunction.Arn
      FilterPolicy: !Sub |
        {
          "detail": ["sendMessages"]
        }

  FabricInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: !Sub "sns.${AWS::URLSuffix}"
      SourceArn: !GetAtt MasterRegion.Fabric
      FunctionName: !GetAtt SendMessagesFunction.Arn

Outputs:

  PinpointId:
    Description: ID of the Pinpoint application
    Value: !GetAtt Pinpoint.Id
    Export:
      Name: PinpointId